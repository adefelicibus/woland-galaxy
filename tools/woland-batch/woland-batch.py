"""
Rewrite of woland-batch.py for Version 0.2 of woland.

SYNOPSIS

    rgFastQC.py -i input_file -j input_file.name -o output_html_file [-d output_directory]
        [-f fastq|bam|sam] [-n job_name] [-c contaminant_file] [-e fastqc_executable]

EXAMPLE (generated by Galaxy)

    rgFastQC.py -i path/dataset_1.dat -j 1000gsample.fastq -o path/dataset_3.dat -d path/job_working_directory/subfolder
        -f fastq -n FastQC -c path/dataset_2.dat -e fastqc
"""

# import bz2
import glob
# import gzip
# import mimetypes
import optparse
import os
import re
import shutil
import subprocess
import tempfile
# import zipfile


class WolandBatchRunner(object):

    WOLAND_PATH = '/home/alexandre/projetos/woland/'

    def __init__(self, opts=None):
        '''
        Initializes an object to run woland in Galaxy.
        '''

        # Check whether the options are specified and saves them into the object
        assert opts is not None
        self.opts = opts

    def prepare_command_line(self):
        '''
        Develops the Commandline to run FastQC in Galaxy
        '''

        intname = self.opts.inputtablename
        incname = self.opts.chrprofilename

        # Replace unwanted or problematic charaters in the input file name
        self.inputtableinfilename = re.sub(r'[^a-zA-Z0-9_\-\.]', '_', os.path.basename(intname))
        self.inputchinfilename = re.sub(r'[^a-zA-Z0-9_\-\.]', '_', os.path.basename(incname))

        # Build the Commandline from the given parameters
        command_line = [
            'perl',
            os.path.join(self.WOLAND_PATH, opts.executable),
            '-i',
            self.inputtableinfilename,
            '-c',
            self.inputchinfilename,
            '-w',
            self.opts.hotspotwindow,
            '-g',
            self.opts.genomepath,
            '-n',
            self.opts.genomename,
            '-o',
            self.opts.outputdir]

        self.command_line = ' '.join(command_line)

    def build_html(self):
        pass

    def copy_output_file_to_dataset(self):
        '''
        Retrieves the output html and text files from the output directory and
        copies them to the Galaxy output files
        '''

        # retrieve html file
        result_file = glob.glob(self.opts.outputdir + '/*html')
        with open(result_file[0], 'rb') as fsrc:
            with open(self.opts.htmloutput, 'wb') as fdest:
                shutil.copyfileobj(fsrc, fdest)

        # # retrieve text file
        # text_file = glob.glob(self.opts.outputdir + '/*/fastqc_data.txt')
        # with open(text_file[0], 'rb') as fsrc:
        #     with open(self.opts.textoutput, 'wb') as fdest:
        #         shutil.copyfileobj(fsrc, fdest)

    def run_woland_batch(self):
        '''
        Executes woland.
        Make sure the mandatory import parameters input, inputfilename, outputdir and htmloutput
        have been specified in the options
        '''

        # Create a log file
        dummy, tlog = tempfile.mkstemp(
            prefix='woland_batch', suffix=".log", dir=self.opts.outputdir)
        sout = open(tlog, 'w')

        self.prepare_command_line()
        sout.write(self.command_line)
        sout.write('\n')
        # between the input (.dat) file and the given input file name
        sout.write("Creating symlink\n")
        os.symlink(self.opts.inputtable, self.inputtableinfilename)
        os.symlink(self.opts.chrprofile, self.inputchinfilename)
        sout.write("check_call\n")
        subprocess.check_call(self.command_line, shell=True)
        sout.write(
            "Copying working %s file to %s \n" % (self.inputtableinfilename, self.opts.htmloutput))
        self.copy_output_file_to_dataset()
        sout.write("Finished")
        print('acabou o log')
        sout.close()


if __name__ == '__main__':

    op = optparse.OptionParser()

    op.add_option('-i', '--inputtable', default=None)
    op.add_option('-j', '--inputtablename', default=None)
    op.add_option('-o', '--htmloutput', default=None)
    op.add_option('-c', '--chrprofile', default=None)
    op.add_option('-p', '--chrprofilename', default=None)
    op.add_option('-w', '--hotspotwindow', default=1000)
    op.add_option('-g', '--genomepath', default=None)
    op.add_option('-x', '--genomename', default="genome")
    op.add_option('-d', '--outputdir', default="/tmp/shortread")
    op.add_option('-n', '--namejob', default='woland-batch')
    op.add_option('-e', '--executable', default='woland-batch.pl')
    opts, args = op.parse_args()

    assert opts.inputtable is not None
    assert opts.inputtablename is not None
    assert opts.chrprofile is not None
    assert opts.chrprofilename is not None
    assert opts.genomepath is not None
    assert opts.htmloutput is not None

    if not os.path.exists(opts.outputdir):
        os.makedirs(opts.outputdir)

    opts.genomename = opts.genomepath.rsplit('/', 1)[-1]

    woland_runner = WolandBatchRunner(opts)
    woland_runner.run_woland_batch()
